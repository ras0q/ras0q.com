---
interface Props {
  start: string
  end: string
  curve?: number
}

const { start, end, curve = 100 } = Astro.props
---

<astro-connector
  data-start={start}
  data-end={end}
  data-curve={curve}
  width="100svw"
  height="100svh"
>
  <svg version="1.1" width="100svw" height="100svh" viewBox="0 0 100svw 100svh">
    <path fill="none" stroke="#000" stroke-width="5px"></path>
  </svg>
</astro-connector>

<style>
  astro-connector {
    position: absolute;
  }
</style>

<script>
  class AstroConnector extends HTMLElement {
    constructor() {
      super()
      const { start: startId, end: endId, curve: curveStr } = this.dataset
      if (!startId || !endId) return

      const start = document.getElementById(startId)
      const end = document.getElementById(endId)
      if (!start || !end) return

      const startRect = start.getBoundingClientRect()
      const endRect = end.getBoundingClientRect()
      const sx = startRect.right
      const sy = startRect.top + startRect.height / 2
      const ex = endRect.left
      const ey = endRect.top + endRect.height / 2

      const path = this.querySelector('svg > path') as SVGPathElement
      if (!path) return
      const curve = Number(curveStr)
      path.setAttribute(
        'd',
        `M ${sx} ${sy} C ${sx + curve} ${sy}, ${ex - curve}, ${ey}, ${ex}, ${ey}`,
      )
      path.style.position = 'absolute'
      path.style.left = `${Math.min(sx, ex)}px`
      path.style.top = `${Math.min(sy, ey)}px`
      path.style.width = `${Math.abs(ex - sx) + 5}px`
      path.style.height = `${Math.abs(ey - sy) + 5}px`
    }
  }

  customElements.define('astro-connector', AstroConnector)
</script>
