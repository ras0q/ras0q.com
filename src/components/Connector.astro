---
interface Props {
  start: string
  end: string
  curve?: number
}

const { start, end, curve = 100 } = Astro.props
---

<astro-connector data-start={start} data-end={end} data-curve={curve}>
  <svg version="1.1">
    <path fill="none" stroke="#000" stroke-width="5px"></path>
  </svg>
</astro-connector>

<style>
  astro-connector {
    position: absolute;
  }
</style>

<script>
  class AstroConnector extends HTMLElement {
    constructor() {
      super()
      const { start: startId, end: endId, curve: curveStr } = this.dataset
      if (!startId || !endId) return

      const start = document.getElementById(startId)
      const end = document.getElementById(endId)
      if (!start || !end) return

      const svg = this.querySelector('svg') as SVGSVGElement
      const path = this.querySelector('svg > path') as SVGPathElement
      if (!svg || !path) return

      const curve = Number(curveStr)

      this.fit(start, end, svg, path, curve)

      const observer = new MutationObserver(() => {
        this.fit(start, end, svg, path, curve)
      })
      observer.observe(start, { attributes: true, characterData: true })
      observer.observe(end, { attributes: true, characterData: true })
    }

    fit(
      start: HTMLElement,
      end: HTMLElement,
      svg: SVGSVGElement,
      path: SVGPathElement,
      curve: number,
    ) {
      const startRect = start.getBoundingClientRect()
      const endRect = end.getBoundingClientRect()
      const sx = startRect.right
      const sy = startRect.top + startRect.height / 2
      const ex = endRect.left
      const ey = endRect.top + endRect.height / 2
      svg.setAttribute('viewBox', `${sx} ${sy} ${Math.abs(ex - sx)} ${Math.abs(ey - sy)}`)
      svg.style.left = `${sx}px`
      svg.style.top = `${sy}px`
      svg.style.width = `${Math.abs(ex - sx)}px`
      svg.style.height = `${Math.abs(ey - sy)}px`
      svg.style.position = 'absolute'
      svg.style.overflow = 'visible'

      path.setAttribute(
        'd',
        `M ${sx} ${sy} C ${sx + curve} ${sy}, ${ex - curve}, ${ey}, ${ex}, ${ey}`,
      )
    }
  }

  customElements.define('astro-connector', AstroConnector)
</script>
