---
interface Props {
  start: string
  end: string
}

const { start, end } = Astro.props
---

<astro-connector data-start={start} data-end={end}>
  <svg version="1.1" width="100%" height="100%">
    <path width="100%" height="100%" fill="none" stroke="#000" stroke-width="5px"></path>
  </svg>
</astro-connector>

<style>
  astro-connector {
    position: absolute;
  }
</style>

<script>
  class AstroConnector extends HTMLElement {
    constructor() {
      super()
      const { start: startId, end: endId } = this.dataset
      if (!startId || !endId) return

      const start = document.getElementById(startId)
      const end = document.getElementById(endId)
      if (!start || !end) return

      // TODO: startが右側にあるときの処理
      const startRect = start.getBoundingClientRect()
      const endRect = end.getBoundingClientRect()
      const sx = startRect.right
      const sy = startRect.top + startRect.height / 2
      const ex = endRect.left
      const ey = endRect.top + endRect.height / 2
      const dx = ex - sx
      const dy = ey - sy

      const path = this.querySelector('svg > path')
      if (!path) return
      path.setAttribute('d', `m ${0} ${Math.max(0, -dy)} c ${dx} ${0}, ${0}, ${dy}, ${dx}, ${dy}`)

      this.style.left = `${Math.min(sx, ex)}px`
      this.style.top = `${Math.min(sy, ey)}px`
      this.style.width = `${Math.abs(dx) + 5}px`
      this.style.height = `${Math.abs(dy) + 5}px`
    }
  }

  customElements.define('astro-connector', AstroConnector)
</script>
