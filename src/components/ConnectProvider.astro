---
interface Props {
  toSelector: string
  direction?: 'leftToRight' | 'rightToLeft'
  curve?: number
}

const { toSelector, direction = 'leftToRight', curve = 100 } = Astro.props
---

<astro-connect-provider data-to-selector={toSelector} data-direction={direction} data-curve={curve}>
  <svg version="1.1">
    <path></path>
  </svg>
  <span class="connector-start">
    <slot />
  </span>
</astro-connect-provider>

<style>
  astro-connect-provider {
    > svg {
      position: absolute;
      overflow: visible;
      z-index: -1;

      > path {
        fill: none;
        stroke: var(--ctp-latte-text);
        stroke-width: 0.25rem;
      }
    }
  }
</style>

<script>
  class AstroConnectProvider extends HTMLElement {
    constructor() {
      super()
      const { toSelector, direction: directionStr, curve: curveStr } = this.dataset
      if (!toSelector || !directionStr) return

      const _fromElement = this.querySelector<HTMLElement>('.connector-start > *')
      const _toElement = document.querySelector<HTMLElement>(toSelector)
      if (!_fromElement || !_toElement) return

      const direction = directionStr as 'leftToRight' | 'rightToLeft'
      const leftElement = direction === 'leftToRight' ? _fromElement : _toElement
      const rightElement = direction === 'leftToRight' ? _toElement : _fromElement

      const svg = this.querySelector('svg') as SVGSVGElement
      const path = this.querySelector('svg > path') as SVGPathElement
      if (!svg || !path) return

      const curve = Number(curveStr)

      this.fit(leftElement, rightElement, svg, path, curve)

      const observer = new MutationObserver(() => {
        this.fit(leftElement, rightElement, svg, path, curve)
      })
      observer.observe(leftElement, { attributes: true, characterData: true })
      observer.observe(rightElement, { attributes: true, characterData: true })

      const resizeObserver = new ResizeObserver(() => {
        this.fit(leftElement, rightElement, svg, path, curve)
      })
      resizeObserver.observe(document.body)
      resizeObserver.observe(leftElement)
      resizeObserver.observe(rightElement)
    }

    fit(
      leftElement: HTMLElement,
      rightElement: HTMLElement,
      svg: SVGSVGElement,
      path: SVGPathElement,
      curve: number,
    ) {
      const { scrollX, scrollY } = window
      const leftRect = leftElement.getBoundingClientRect()
      const rightRect = rightElement.getBoundingClientRect()
      const lx = scrollX + leftRect.right
      const ly = scrollY + leftRect.top + leftRect.height / 2
      const rx = scrollX + rightRect.left
      const ry = scrollY + rightRect.top + rightRect.height / 2
      const viewLeft = Math.min(lx, rx)
      const viewTop = Math.min(ly, ry)
      const w = Math.abs(rx - lx)
      const h = Math.abs(ry - ly)
      svg.setAttribute('viewBox', `${viewLeft}, ${viewTop}, ${w}, ${h}`)
      svg.style.left = `${viewLeft}px`
      svg.style.top = `${viewTop}px`
      svg.style.width = `${w}px`
      svg.style.height = `${h}px`

      path.setAttribute(
        'd',
        `M ${lx}, ${ly} C ${lx + curve}, ${ly}, ${rx - curve}, ${ry}, ${rx}, ${ry}`,
      )
    }
  }

  customElements.define('astro-connect-provider', AstroConnectProvider)
</script>
