---
import BaseLayout from '../layouts/BaseLayout.astro'
import ConnectProvider from '../components/ConnectProvider.astro'
import LinkCard from '../components/LinkCard.astro'
import { domain, subDomains, subRoutes } from '../libs/consts'
---

<BaseLayout pageTitle="ras0q.com">
  <div class="container">
    <div class="subdomains">
      {
        subDomains.map(({ name, description }) => (
          <ConnectProvider toSelector="#domain">
            <LinkCard
              title={name}
              body={description}
              href={`https://${name}.${domain}`}
              class={'draggable'}
            />
          </ConnectProvider>
        ))
      }
    </div>

    <h1 id="domain" class="draggable">ras0q.com</h1>

    <div class="subroutes">
      {
        subRoutes.map(({ path, description }) => (
          <ConnectProvider toSelector="#domain" direction="rightToLeft">
            <LinkCard title={path} body={description} href={path} class={'draggable'} />
          </ConnectProvider>
        ))
      }
    </div>
  </div>
</BaseLayout>

<style>
  :global(body) {
    margin: 0;
    padding: 0;
  }

  :root {
    &::-webkit-scrollbar {
      display: none;
    }
  }

  .container {
    height: 100vh;
    width: auto;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    gap: 6rem;

    > .subdomains,
    > .subroutes {
      max-width: 150px;
      display: flex;
      flex-direction: column;
      gap: 5rem;
    }

    > #domain {
      font-size: 5rem;
      margin: 0;
      user-select: none;

      display: inline-block;
      background: linear-gradient(120deg, var(--ctp-latte-lavender), var(--ctp-latte-pink));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;

      /* mobile */
      @media screen and (max-width: 600px) {
        font-size: 4rem;
      }
    }
  }

  .draggable {
    position: relative;
    cursor: grab;

    &:active {
      cursor: grabbing;
    }
  }
</style>

<script>
  const nowOffset = (el: HTMLElement) => {
    return {
      nowLeft: el.offsetLeft,
      nowTop: el.offsetTop,
    }
  }

  document.querySelectorAll<HTMLElement>('.draggable').forEach((el) => {
    // save original position for damping oscillation
    const { nowLeft: originalLeft, nowTop: originalTop } = nowOffset(el)

    el.addEventListener('pointermove', (e) => {
      if (e.buttons === 1) {
        const { nowLeft, nowTop } = nowOffset(el)
        const left = nowLeft + e.movementX
        const top = nowTop + e.movementY

        document.body.style.touchAction = 'none'
        el.style.left = `${left - originalLeft}px`
        el.style.right = 'auto'
        el.style.top = `${top - originalTop}px`
        el.style.bottom = 'auto'
        el.style.position = 'relative'
        el.draggable = false
        el.setPointerCapture(e.pointerId)
      }
    })

    el.addEventListener('pointerup', (e) => {
      document.body.style.touchAction = 'auto'
      el.releasePointerCapture(e.pointerId)

      // return to original position with damping oscillation
      const omega = 0.01
      const b = 0.001
      const f = 0.01
      const { nowLeft: left0, nowTop: top0 } = nowOffset(el)
      const ts0 = performance.now()
      const returnToOriginal = (ts: DOMHighResTimeStamp) => {
        const { nowLeft, nowTop } = nowOffset(el)
        if (Math.abs(nowLeft - originalLeft) < f && Math.abs(nowTop - originalTop) < f) return

        const t = ts - ts0
        const dx = (left0 - originalLeft) * Math.exp(-b * t) * Math.cos(omega * t)
        const dy = (top0 - originalTop) * Math.exp(-b * t) * Math.cos(omega * t)
        el.style.left = `${dx}px`
        el.style.top = `${dy}px`

        requestAnimationFrame(returnToOriginal)
      }
      requestAnimationFrame(returnToOriginal)
    })
  })
</script>
