---
import BaseLayout from '../layouts/BaseLayout.astro'
import ConnectProvider from '../components/ConnectProvider.astro'
import LinkCard from '../components/LinkCard.astro'
import { domain, subDomains, subRoutes } from '../libs/consts'
---

<BaseLayout pageTitle="ras0q.com">
  <h1 id="domain" class="draggable">ras0q.com</h1>

  {
    subDomains.map((d, i) => (
      <ConnectProvider toSelector="#domain">
        <div
          class="draggable"
          style={{
            position: 'fixed',
            top: `${10 + (90 * i) / subDomains.length}%`,
            left: '10%',
          }}
        >
          <LinkCard title={d.name} body={d.description} href={`https://${d.name}.${domain}`} />
        </div>
      </ConnectProvider>
    ))
  }

  {
    subRoutes.map((r, i) => (
      <ConnectProvider toSelector="#domain" direction="rightToLeft">
        <div
          class="draggable"
          style={{
            position: 'fixed',
            top: `${10 + (90 * i) / subRoutes.length}%`,
            right: '10%',
          }}
        >
          <LinkCard title={r.path} body={r.description} href={r.path} />
        </div>
      </ConnectProvider>
    ))
  }
</BaseLayout>

<style>
  :global(body) {
    margin: 0;
    padding: 0;
    height: 100vh;
    width: 100vw;
  }

  #domain {
    font-size: 5rem;
    margin: 0;
    user-select: none;

    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);

    display: inline-block;
    background: -webkit-linear-gradient(
      45deg,
      var(--ctp-frappe-sapphire) 0%,
      var(--ctp-frappe-blue) 30%,
      var(--ctp-frappe-lavender) 70%
    );
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
</style>

<script>
  const nowOffset = (el: HTMLElement) => {
    return {
      nowLeft: el.offsetLeft,
      nowTop: el.offsetTop,
    }
  }

  document.querySelectorAll<HTMLElement>('.draggable').forEach((el) => {
    // save original position for damping oscillation
    const { nowLeft: originalLeft, nowTop: originalTop } = nowOffset(el)

    el.addEventListener('pointermove', (e) => {
      if (e.buttons === 1) {
        const { nowLeft, nowTop } = nowOffset(el)
        const left = nowLeft + e.movementX
        const top = nowTop + e.movementY

        el.style.left = `${left}px`
        el.style.right = 'auto'
        el.style.top = `${top}px`
        el.style.bottom = 'auto'
        el.style.position = 'fixed'
        el.draggable = false
        el.setPointerCapture(e.pointerId)
      }
    })

    el.addEventListener('pointerup', (e) => {
      el.releasePointerCapture(e.pointerId)

      // return to original position with damping oscillation
      const omega = 0.01
      const b = 0.01
      const f = 0.1
      const { nowLeft: left0, nowTop: top0 } = nowOffset(el)
      const ts0 = performance.now()
      const returnToOriginal = (ts: DOMHighResTimeStamp) => {
        const { nowLeft, nowTop } = nowOffset(el)
        if (Math.abs(nowLeft - originalLeft) < f && Math.abs(nowTop - originalTop) < f) return

        const t = ts - ts0
        const dx = (left0 - originalLeft) * Math.exp(-b * t) * Math.cos(omega * t)
        const dy = (top0 - originalTop) * Math.exp(-b * t) * Math.cos(omega * t)
        el.style.left = `${originalLeft + dx}px`
        el.style.top = `${originalTop + dy}px`

        requestAnimationFrame(returnToOriginal)
      }
      requestAnimationFrame(returnToOriginal)
    })
  })
</script>
